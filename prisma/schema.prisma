generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Ticket {
  id               String        @id @default(cuid())
  plateNumber      String
  barcode          String        @unique
  entryTime        DateTime      @default(now())
  exitTime         DateTime?
  totalAmount      Decimal?      @default(0) @db.Decimal(12, 2)
  status           TicketStatus  @default(ACTIVE)
  printedAt        DateTime      @default(now())
  paidAt           DateTime?
  needsReprint     Boolean       @default(false)
  failureReason    String?
  failureTimestamp DateTime?
  gracePeriodUntil DateTime?
  operatorId       String?
  vehicleType      String?       @default("car")
  notes            String?
  paymentMethod    String?       @default("CASH")
  auditLogs        AuditLog[]
  transactions     Transaction[]

  @@index([plateNumber])
  @@index([status])
  @@index([entryTime])
  @@index([barcode])
  @@map("tickets")
}

model PensionCustomer {
  id           String        @id @default(cuid())
  name         String
  phone        String?
  plateNumber  String        @unique
  vehicleMake  String?
  vehicleModel String?
  monthlyRate  Decimal       @db.Decimal(10, 2)
  startDate    DateTime
  endDate      DateTime
  isActive     Boolean       @default(true)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  transactions Transaction[]

  @@map("pension_customers")
}

model Transaction {
  id            String           @id @default(cuid())
  type          TransactionType
  amount        Decimal          @db.Decimal(12, 2)
  description   String?
  timestamp     DateTime         @default(now())
  operatorId    String?
  balanceBefore Decimal?         @db.Decimal(12, 2)
  balanceAfter  Decimal?         @db.Decimal(12, 2)
  paymentMethod String?          @default("CASH")
  changeGiven   Decimal?         @db.Decimal(12, 2)
  ipAddress     String?
  deviceId      String?
  sessionId     String?
  ticketId      String?
  pensionId     String?
  auditLogs     AuditLog[]
  pension       PensionCustomer? @relation(fields: [pensionId], references: [id])
  ticket        Ticket?          @relation(fields: [ticketId], references: [id])

  @@index([type])
  @@index([timestamp])
  @@index([operatorId])
  @@index([ticketId])
  @@map("transactions")
}

model PricingConfig {
  id                String          @id @default(cuid())
  minimumHours      Int             @default(1)
  minimumRate       Decimal         @db.Decimal(12, 2)
  incrementMinutes  Int             @default(15)
  incrementRate     Decimal         @default(0) @db.Decimal(12, 2)
  dailySpecialHours Int?
  dailySpecialRate  Decimal?        @db.Decimal(12, 2)
  monthlyRate       Decimal         @db.Decimal(12, 2)
  lostTicketFee     Decimal         @db.Decimal(12, 2)
  isActive          Boolean         @default(true)
  validFrom         DateTime        @default(now())
  validUntil        DateTime?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  createdBy         String?
  auditLogs         AuditLog[]
  incrementRates    IncrementRate[]

  @@index([isActive])
  @@index([validFrom])
  @@map("pricing_config")
}

model CashRegister {
  id              String             @id @default(cuid())
  openingBalance  Decimal            @db.Decimal(12, 2)
  currentBalance  Decimal            @db.Decimal(12, 2)
  expectedBalance Decimal?           @db.Decimal(12, 2)
  discrepancy     Decimal?           @db.Decimal(12, 2)
  date            DateTime           @default(now())
  shiftStart      DateTime           @default(now())
  shiftEnd        DateTime?
  operatorId      String?
  status          CashRegisterStatus @default(OPEN)
  notes           String?
  lastUpdated     DateTime           @updatedAt
  auditLogs       AuditLog[]
  cashFlows       CashFlow[]

  @@index([date])
  @@index([operatorId])
  @@index([status])
  @@map("cash_register")
}

model Admin {
  id        String     @id @default(cuid())
  email     String     @unique
  password  String
  name      String
  isActive  Boolean    @default(true)
  role      AdminRole  @default(ADMIN)
  lastLogin DateTime?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  auditLogs AuditLog[]

  @@index([email])
  @@index([isActive])
  @@map("admins")
}

model IncrementRate {
  id              String        @id @default(cuid())
  pricingConfigId String
  incrementNumber Int
  rate            Decimal       @db.Decimal(12, 2)
  description     String?
  createdAt       DateTime      @default(now())
  pricingConfig   PricingConfig @relation(fields: [pricingConfigId], references: [id], onDelete: Cascade)

  @@unique([pricingConfigId, incrementNumber])
  @@index([pricingConfigId])
  @@map("increment_rates")
}

model CashFlow {
  id             String       @id @default(cuid())
  cashRegisterId String
  type           CashFlowType
  amount         Decimal      @db.Decimal(12, 2)
  reason         String?
  performedBy    String?
  authorizedBy   String?
  timestamp      DateTime     @default(now())
  notes          String?
  auditLogs      AuditLog[]
  cashRegister   CashRegister @relation(fields: [cashRegisterId], references: [id], onDelete: Cascade)

  @@index([cashRegisterId])
  @@index([type])
  @@index([timestamp])
  @@index([performedBy])
  @@map("cash_flows")
}

model AuditLog {
  id              String         @id @default(cuid())
  entityType      String
  entityId        String
  action          String
  oldValue        Json?
  newValue        Json?
  performedBy     String?
  ipAddress       String?
  userAgent       String?
  timestamp       DateTime       @default(now())
  ticketId        String?
  transactionId   String?
  pricingConfigId String?
  cashRegisterId  String?
  cashFlowId      String?
  adminId         String?
  admin           Admin?         @relation(fields: [adminId], references: [id])
  cashFlow        CashFlow?      @relation(fields: [cashFlowId], references: [id])
  cashRegister    CashRegister?  @relation(fields: [cashRegisterId], references: [id])
  pricingConfig   PricingConfig? @relation(fields: [pricingConfigId], references: [id])
  ticket          Ticket?        @relation(fields: [ticketId], references: [id])
  transaction     Transaction?   @relation(fields: [transactionId], references: [id])

  @@index([entityType, entityId])
  @@index([timestamp])
  @@index([performedBy])
  @@index([action])
  @@map("audit_logs")
}

enum TicketStatus {
  ACTIVE
  PAID
  LOST
  CANCELLED
  REFUNDED
}

enum TransactionType {
  PARKING
  PENSION
  LOST_TICKET
  REFUND
  WITHDRAWAL
  DEPOSIT
  ADJUSTMENT
  OPENING_BALANCE
  CLOSING_BALANCE
}

enum CashFlowType {
  WITHDRAWAL
  DEPOSIT
  ADJUSTMENT
  OPENING_BALANCE
  CLOSING_BALANCE
}

enum CashRegisterStatus {
  OPEN
  CLOSED
  SUSPENDED
  RECONCILING
}

enum AdminRole {
  SUPER_ADMIN
  ADMIN
  MANAGER
  VIEWER
}
